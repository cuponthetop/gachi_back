{"version":3,"sources":["util/controller-skeleton.js"],"names":["logger","fields","fieldsToOmit","modelInfo","returnInfo","_","omit","ret","isUndefined","isArray","concat","invalidFields","pullAll","clone","keys","length","Error","pick","skeletalGet"],"mappings":";;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;uDAsBO,iBAA2BA,MAA3B,EAAmCC,MAAnC,EAA2CC,YAA3C,EAAyDC,SAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAEDC,sBAFC,GAEYC,EAAEC,IAAF,CAAOH,SAAP,EAAkBD,YAAlB,CAFZ;AAIDK,eAJC;;AAAA,kBAMDF,EAAEG,WAAF,CAAcP,MAAd,MAA0B,KANzB;AAAA;AAAA;AAAA;;AAOH,gBAAII,EAAEI,OAAF,CAAUR,MAAV,MAAsB,KAA1B,EAAiC;AAC/BA,uBAASI,EAAEK,MAAF,CAAS,EAAT,EAAaT,MAAb,CAAT;AACD;;AAEGU,yBAXD,GAWiBN,EAAEO,OAAF,CAAUP,EAAEQ,KAAF,CAAQZ,MAAR,CAAV,EAA2BI,EAAES,IAAF,CAAOV,UAAP,CAA3B,CAXjB;;AAAA,kBAaCO,cAAcI,MAAd,KAAyB,CAb1B;AAAA;AAAA;AAAA;;AAAA,kBAcK,IAAIC,KAAJ,CAAU,yDAAV,CAdL;;AAAA;;AAiBHT,kBAAMF,EAAEY,IAAF,CAAOb,UAAP,EAAmBH,MAAnB,CAAN;AAjBG;AAAA;;AAAA;AAmBHM,kBAAMH,UAAN;;AAnBG;AAAA,6CAsBEG,GAtBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeW,W;;;;;AAxBtB;;IAAYb,C","file":"controller-skeleton.js","sourcesContent":["import * as _ from 'lodash';\n\n/**\n * <p>\n * 기존 Oject에서 원하는 property만으로 구성된 Object 생성한다.<br/>\n * Property 목록은 두 arguments를 통해 구성/제한할 수 있다. (fields, fieldsToOmit)<br/>\n * 참고. 기본적으로 _(lodash).pick()과 같은 기능이지만,<br/>\n * fieldsToOmit을 통해 안전하지 않은 property를 제공하는 것에 제한을 둠\n * </p>\n * \n * <p>\n * 참고<br/>\n * omit(object, [paths]) : object에서 paths에 해당하는 properties 제외<br/>\n * pullAll(array, [values]): array에서 values 값 제외하고 추출<br/>\n * pick(object, [fields]): object의 key가 fields에 해당하는 property만 추출\n * </p>\n * \n * @param {LoggerInstance} logger Logger Instance\n * @param {string[]} fields modelInfo object에서 추출하고 싶은 property name Array\n * @param {string[]} fieldsToOmit 추출을 제한하는 property name Array\n * @param {*} modelInfo 원본 Object\n * @returns {Promise<any>} 제한된 property를 제외하고 원본 object에서 원하는 property만으로 구성된 object\n * @throws {Error} modelInfo에서 fieldsToOmit에 해당하는 property를 제외하고 fields에 해당하는 propery가 없을 때 발생\n */\nexport async function skeletalGet(logger, fields, fieldsToOmit, modelInfo) {\n\n  let returnInfo = _.omit(modelInfo, fieldsToOmit);\n\n  let ret;\n\n  if (_.isUndefined(fields) === false) {\n    if (_.isArray(fields) === false) {\n      fields = _.concat([], fields);\n    }\n\n    let invalidFields = _.pullAll(_.clone(fields), _.keys(returnInfo));\n\n    if (invalidFields.length !== 0) {\n      throw new Error('Field Selector should be provided with array of strings');\n    }\n\n    ret = _.pick(returnInfo, fields);\n  } else {\n    ret = returnInfo;\n  }\n\n  return ret;\n}\n"]}