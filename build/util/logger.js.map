{"version":3,"sources":["util/logger.js"],"names":["getLogger","chalk","morgan","_","moduleName","httpOpts","logger","has","transports","console","push","get","http","add","generateStream","level","write","message","compile","fmt","replace","name","arg","js","Function","requestEndLoggingFormat","token","req","res","status","statusCode","statusStr","toString","red","yellow","cyan","green","grey","trimJSONStr","white","input","exclude","maxLen","ret","json","omit","JSON","stringify","substring","ign","getEndLogFormatter","args","grey_logger","stream","getStartLogFormatter","requestStartLoggingFormat","immediate","body"],"mappings":";;;;;;QAegBA,S,GAAAA,S;;AAfhB;;IAAYC,K;;AACZ;;IAAYC,M;;AACZ;;AACA;;IAAYC,C;;AACZ;;AACA;;;;AAEA;;;;;;;;AAQO,SAASH,SAAT,CAAmBI,UAAnB,EAA+BC,QAA/B,EAAyC;AAC9C,MAAIC,SAAS,IAAb;;AAEA,MAAI,UAAU,iBAAQC,GAAR,CAAYH,UAAZ,CAAd,EAAuC;AACrC,QAAII,cAAa,EAAjB;AACA,QAAIC,UAAU,uCAAoBL,UAApB,CAAd;AACAI,gBAAWE,IAAX,CAAgBD,OAAhB;AACD,QAAI,SAASN,EAAEQ,GAAF,CAAMN,QAAN,EAAgB,QAAhB,EAA0B,KAA1B,CAAb,EAA+C;AAC5C,UAAIO,OAAO,oCAAiBR,UAAjB,EAA6BC,QAA7B,CAAX;AACAG,kBAAWE,IAAX,CAAgBE,IAAhB;AACD;;AAEDN,aAAS,iBAAQO,GAAR,CAAYT,UAAZ,EAAwB;AAC/BI,kBAAYA;AADmB,KAAxB,CAAT;AAGD,GAZD,MAYO;AACLF,aAAS,iBAAQK,GAAR,CAAYP,UAAZ,CAAT;AACD;;AAED,SAAOE,MAAP;AACD;;AAED;;;AAGA,SAASQ,cAAT,CAAwBR,MAAxB,EAAgCS,KAAhC,EAAuC;AACrC,SAAO;AACLC,WAAO,eAACC,OAAD,EAAY;AACjBX,aAAOS,KAAP,EAAcE,OAAd;AACD;AAHI,GAAP;AAKD;;AAED;AACA;AACA,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACpB;AACAA,QAAMA,IAAIC,OAAJ,CAAY,IAAZ,EAAkB,KAAlB,CAAN;AACAD,QAAMA,IAAIC,OAAJ,CAAY,gCAAZ,EACJ,UAAUjB,CAAV,EAAakB,IAAb,EAAmBC,GAAnB,EAAwB;AACtB,kCAA4BD,IAA5B,sBAAiDC,GAAjD;AACD,GAHG,CAAN;AAIA,MAAIC,oBAAkBJ,GAAlB,OAAJ;AACA;AACA,SAAO,IAAIK,QAAJ,CAAa,kBAAb,EAAiCD,EAAjC,CAAP;AACD;;AAED,IAAME,0BAA0B,SAA1BA,uBAA0B,GAAM;AACpCvB,SAAOwB,KAAP,CAAa,QAAb,EAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnC,QAAIC,SAASD,IAAIE,UAAjB;AACA,QAAIC,YAAYF,OAAOG,QAAP,EAAhB;AACA,QAAIH,UAAU,GAAd,EAAmB;AACjBE,kBAAY9B,MAAMgC,GAAN,CAAUF,SAAV,CAAZ;AACD,KAFD,MAEO,IAAIF,UAAU,GAAd,EAAmB;AACxBE,kBAAY9B,MAAMiC,MAAN,CAAaH,SAAb,CAAZ;AACD,KAFM,MAEA,IAAIF,UAAU,GAAd,EAAmB;AACxBE,kBAAY9B,MAAMkC,IAAN,CAAWJ,SAAX,CAAZ;AACD,KAFM,MAEA;AACLA,kBAAY9B,MAAMmC,KAAN,CAAYL,SAAZ,CAAZ;AACD;AACD,WAAOA,SAAP;AACD,GAbD;;AAeA7B,SAAOwB,KAAP,CAAa,UAAb,EAAyB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACrC,WAAO3B,MAAMoC,IAAN,CAAWC,YAAYV,GAAZ,EAAiB,EAAjB,EAAqB,IAArB,KAA8B,EAAzC,CAAP;AACD,GAFD;;AAIA,SAAOV,QAAWjB,MAAMsC,KAAN,CAAY,0BAAZ,CAAX,SAAsDtC,MAAMoC,IAAN,CAAW,0CAAX,CAAtD,gBAAP;AACD,CArBD;;AAuBA;;;;;;;AAOA,IAAMC,cAAc,SAAdA,WAAc,CAAUE,KAAV,EAAiBC,OAAjB,EAA0BC,MAA1B,EAAkC;AACpD,MAAIC,MAAM,EAAV;AACA,MAAIC,OAAOzC,EAAE0C,IAAF,CAAOL,KAAP,EAAcC,OAAd,CAAX;;AAEA,MAAI;AACF,QAAIG,SAAS,IAAb,EAAmB;AACjBD,YAAMG,KAAKC,SAAL,CAAeH,IAAf,EAAqBI,SAArB,CAA+B,CAA/B,EAAkCN,MAAlC,CAAN;AACD;AACF,GAJD,CAIE,OAAOO,GAAP,EAAY,CAEb;AACD,SAAON,GAAP;AACD,CAZD;;AAcA,SAASO,kBAAT,CAA4BC,IAA5B,EAAkC;AAChC,MAAIC,cAAcpD,UAAU,MAAV,EAAkBmD,IAAlB,CAAlB;AACA,SAAOjD,OAAOuB,yBAAP,EAAkC,EAAE4B,QAAQvC,eAAesC,WAAf,EAA4B,MAA5B,CAAV,EAAlC,CAAP;AACD;;AAED,SAASE,oBAAT,CAA8BH,IAA9B,EAAoC;AAClC,MAAIC,cAAcpD,UAAU,MAAV,EAAkBmD,IAAlB,CAAlB;AACA,SAAOjD,OAAOqD,2BAAP,EAAoC,EAAEC,WAAW,IAAb,EAAmBH,QAAQvC,eAAesC,WAAf,EAA4B,MAA5B,CAA3B,EAApC,CAAP;AACD;;AAED;;;AAGA,IAAMG,4BAA4B,SAA5BA,yBAA4B,GAAM;AACtCrD,SAAOwB,KAAP,CAAa,UAAb,EAAyB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACrC,WAAO3B,MAAMoC,IAAN,CAAWC,YAAYX,IAAI8B,IAAhB,EAAsB,EAAtB,EAA0B,IAA1B,CAAX,CAAP;AACD,GAFD;AAGA,SAAOvC,QAAWjB,MAAMsC,KAAN,CAAY,KAAZ,CAAX,SAAiCtC,MAAMsC,KAAN,CAAY,SAAZ,CAAjC,SAA2DtC,MAAMsC,KAAN,CAAY,MAAZ,CAA3D,SAAkFtC,MAAMsC,KAAN,CAAY,cAAZ,CAAlF,gBAAP;AACD,CALD;;QAOSW,kB,GAAAA,kB;QAAoBI,oB,GAAAA,oB","file":"logger.js","sourcesContent":["import * as chalk from 'chalk';\nimport * as morgan from 'morgan';\nimport { loggers, Logger, transports, LoggerInstance } from 'winston';\nimport * as _ from 'lodash';\nimport { JsonRequest } from './types';\nimport { getHTTPTransport, getConsoleTransport } from './get-transport';\n\n/**\n * <p>모듈(moduleName)에 대한 LoggerInstance를 리턴하며,<br/>\n * 해당 모듈에 대한 LoggerInstance가 존재하지 않다면 새로 생성하여 이를 리턴한다.</p>\n *\n * @param  {string} moduleName 모듈 이름\n * @param  {any} httpOpts 로그 서버의 host, port, uri가 정의된 객체\n * @returns {LoggerInstance} 모듈에 대한 LoggerInstance\n */\nexport function getLogger(moduleName, httpOpts) {\n  let logger = null;\n\n  if (false === loggers.has(moduleName)) {\n    let transports = [];\n    let console = getConsoleTransport(moduleName);\n    transports.push(console);\n  \tif (true === _.get(httpOpts, 'isHTTP', false)) {\n      let http = getHTTPTransport(moduleName, httpOpts);   \n      transports.push(http);\n    }\n\n    logger = loggers.add(moduleName, {\n      transports: transports\n    });\n  } else {\n    logger = loggers.get(moduleName);\n  }\n\n  return logger;\n}\n\n/**\n * Generate stream object which can be used by morgan to print out it's logs\n */\nfunction generateStream(logger, level) {\n  return {\n    write: (message)=> {\n      logger[level](message);\n    }\n  };\n}\n\n// Copied the morgan compile function over so that cooler formats\n// may be configured\nfunction compile(fmt) {\n  // escape quotes\n  fmt = fmt.replace(/\"/g, '\\\\\"');\n  fmt = fmt.replace(/:([-\\w]{2,})(?:\\[([^\\]]+)\\])?/g,\n    function (_, name, arg) {\n      return `\"\\n    + (tokens[\"${name}\"](req, res, \"${arg}\") || \"-\") + \"`;\n    });\n  let js = `  return \"${fmt}\";`;\n  // jshint evil:true\n  return new Function('tokens, req, res', js);\n}\n\nconst requestEndLoggingFormat = () => {\n  morgan.token('status', (req, res) => {\n    let status = res.statusCode;\n    let statusStr = status.toString();\n    if (status >= 500) {\n      statusStr = chalk.red(statusStr);\n    } else if (status >= 400) {\n      statusStr = chalk.yellow(statusStr);\n    } else if (status >= 300) {\n      statusStr = chalk.cyan(statusStr);\n    } else {\n      statusStr = chalk.green(statusStr);\n    }\n    return statusStr;\n  });\n\n  morgan.token('res-json', (req, res) => {\n    return chalk.grey(trimJSONStr(res, [], 1000) || '');\n  });\n\n  return compile(`${chalk.white('<-- :method :url :status')} ${chalk.grey(':response-time ms - :res[content-length]')} :res-json`);\n};\n\n/**\n * Exclude specified properties from the given json\n * and return truncated string representation of input\n * @param json\n * @param exclude list of property names to omit\n * @param maxLen maximum length to allow\n */\nconst trimJSONStr = function (input, exclude, maxLen) {\n  let ret = '';\n  let json = _.omit(input, exclude);\n\n  try {\n    if (json !== null) {\n      ret = JSON.stringify(json).substring(0, maxLen);\n    }\n  } catch (ign) {\n\n  }\n  return ret;\n};\n\nfunction getEndLogFormatter(args) {\n  let grey_logger = getLogger('HTTP', args);\n  return morgan(requestEndLoggingFormat(), { stream: generateStream(grey_logger, \"info\") });\n}\n\nfunction getStartLogFormatter(args) {\n  let grey_logger = getLogger('HTTP', args);\n  return morgan(requestStartLoggingFormat(), { immediate: true, stream: generateStream(grey_logger, \"info\") });\n}\n\n/**\n * Log format for HTTP Request\n */\nconst requestStartLoggingFormat = () => {\n  morgan.token('req-body', (req, res) => {\n    return chalk.grey(trimJSONStr(req.body, [], 1000));\n  });\n  return compile(`${chalk.white('-->')} ${chalk.white(':method')} ${chalk.white(':url')} ${chalk.white(':remote-addr')} :req-body`);\n};\n\nexport { getEndLogFormatter, getStartLogFormatter };\n"]}