{"version":3,"sources":["util/get-transport.js"],"names":["getHTTPTransport","getConsoleTransport","_","moduleName","httpOpts","host","port","path","transport","Http","level","set","msg","meta","callback","self","options","timestamp","Date","toISOString","message","label","_request","err","res","statusCode","Error","emit","bind","Console","colorize"],"mappings":";;;;;QAUgBA,gB,GAAAA,gB;QAsDAC,mB,GAAAA,mB;;AAhEhB;;AACA;;IAAYC,C;;;;AAEZ;;;;;;;AAOO,SAASF,gBAAT,CAA0BG,UAA1B,EAAsCC,QAAtC,EAAgD;AACrD,MAAIC,OAAOD,SAASC,IAApB;AACA,MAAIC,OAAOF,SAASE,IAApB;AACA,MAAIC,OAAOH,SAASG,IAApB;;AAEA,MAAIC,YAAY,IAAK,oBAAWC,IAAhB,CAAsB;AACpCC,WAAO,OAD6B;AAEpCL,cAFoC;AAGpCC,cAHoC;AAIpCC;AAJoC,GAAtB,CAAhB;;AAOAL,IAAES,GAAF,CAAMH,SAAN,EAAiB,OAAjB,EAA0BL,UAA1B;AACAD,IAAES,GAAF,CAAMH,SAAN,EAAiB,KAAjB,EAAwB,UAAUE,KAAV,EAAiBE,GAAjB,EAAsBC,IAAtB,EAA4BC,QAA5B,EAAsC;AAC5D,QAAIC,OAAO,IAAX;;AAEA,QAAI,OAAOF,IAAP,KAAgB,UAApB,EAAgC;AAC9BC,iBAAWD,IAAX;AACAA,aAAO,EAAP;AACD;;AAED,QAAIG,UAAU;AACZN,aAAOA,KADK;AAEZO,iBAAW,IAAIC,IAAJ,GAAWC,WAAX,EAFC;AAGZC,eAASR,GAHG;AAIZC,YAAMA,IAJM;AAKZQ,aAAO,KAAKA;AALA,KAAd;;AASA,SAAKC,QAAL,CAAcN,OAAd,EAAuB,UAAUO,GAAV,EAAeC,GAAf,EAAoB;AACzC,UAAIA,OAAOA,IAAIC,UAAJ,KAAmB,GAA9B,EAAmC;AACjCF,cAAM,IAAIG,KAAJ,CAAU,uBAAuBF,IAAIC,UAArC,CAAN;AACD;;AAED,UAAIF,GAAJ,EAAS,OAAOT,SAASS,GAAT,CAAP;;AAET;AACA;AACAR,WAAKY,IAAL,CAAU,QAAV;;AAEA,UAAIb,QAAJ,EAAcA,SAAS,IAAT,EAAe,IAAf;AACf,KAZD;AAaD,GA9BuB,CA8BtBc,IA9BsB,CA8BjBpB,SA9BiB,CAAxB;;AAgCA,SAAOA,SAAP;AACD;;AAED;;;;;;AAMO,SAASP,mBAAT,CAA6BE,UAA7B,EAAyC;AAC9C,MAAIK,YAAY,IAAK,oBAAWqB,OAAhB,CAAyB;AACvCnB,WAAO,OADgC;AAEvCoB,cAAU,IAF6B;AAGvCb,eAAW,IAH4B;AAIvCI,WAAOlB;AAJgC,GAAzB,CAAhB;;AAOA,SAAOK,SAAP;AACD","file":"get-transport.js","sourcesContent":["import { ConsoleTransportInstance, HttpTransportInstance, transports } from 'winston';\nimport * as _ from 'lodash';\n\n/**\n * 'debug' 레벨 이상의 로그를 Http를 통해 로그 서버로 전송하기 위한 transport\n * \n * @param  {string} moduleName 로그를 남기는 모듈 이름\n * @param  {any} httpOpts 로그 서버의 host, port, uri가 정의된 객체\n * @returns {HttpTransportInstance} 로그 서버 설정이 적용된 winston transport instance\n */\nexport function getHTTPTransport(moduleName, httpOpts) {\n  let host = httpOpts.host;\n  let port = httpOpts.port;\n  let path = httpOpts.path;\n\n  let transport = new (transports.Http)({\n    level: 'debug',\n    host,\n    port,\n    path\n  });\n\n  _.set(transport, 'label', moduleName);\n  _.set(transport, 'log', function (level, msg, meta, callback) {\n    var self = this;\n\n    if (typeof meta === 'function') {\n      callback = meta;\n      meta = {};\n    }\n\n    var options = {\n      level: level,\n      timestamp: new Date().toISOString(),\n      message: msg,\n      meta: meta,\n      label: this.label\n    };\n\n\n    this._request(options, function (err, res) {\n      if (res && res.statusCode !== 200) {\n        err = new Error('HTTP Status Code: ' + res.statusCode);\n      }\n\n      if (err) return callback(err);\n\n      // TODO: emit 'logged' correctly,\n      // keep track of pending logs.\n      self.emit('logged');\n\n      if (callback) callback(null, true);\n    });\n  }.bind(transport));\n    \n  return transport;\n}\n\n/**\n * 'debug' 레벨 이상의 로그를 콘솔에 출력하기 위한 transport\n * \n * @param  {string} moduleName 로그를 남기는 모듈 이름\n * @returns {ConsoleTransportInstance} 콘솔 설정이 적용된 winston transport instance\n */\nexport function getConsoleTransport(moduleName) {\n  let transport = new (transports.Console)({\n    level: 'debug',\n    colorize: true,\n    timestamp: true,\n    label: moduleName,\n  });\n\n  return transport;\n}\n\n"]}