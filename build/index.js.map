{"version":3,"sources":["index.js"],"names":["arg","args","parseArgs","info","JSON","stringify","db","_","assign","dataService","model","handler","app","server","listen","port","main","require","module"],"mappings":";;;;;;;;uDAUO,iBAAoBA,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AACDC,gBADC,GACM,IADN;;;AAGL,gBAAID,GAAJ,EAAS;AACPC,qBAAOD,GAAP;AACD,aAFD,MAEO;AACLC,qBAAO,iBAAUC,SAAV,EAAP;AACD;;AAED,2CAAkBD,IAAlB;;AAEA,2BAAOE,IAAP,iCAA0CC,KAAKC,SAAL,CAAeJ,IAAf,CAA1C;;AAXK;AAAA,mBAaU,wCAAiBA,IAAjB,CAbV;;AAAA;AAaDK,cAbC;;AAcLC,cAAEC,MAAF,CAASP,IAAT,EAAe,EAAEQ,aAAaH,EAAf,EAAf;;AAdK;AAAA,mBAgBa,uCAAoBL,IAApB,CAhBb;;AAAA;AAgBDS,iBAhBC;;AAiBLH,cAAEC,MAAF,CAASP,IAAT,EAAeS,KAAf;;AAjBK;AAAA,mBAmBe,8CAAsBT,IAAtB,CAnBf;;AAAA;AAmBDU,mBAnBC;;AAoBLJ,cAAEC,MAAF,CAASP,IAAT,EAAeU,OAAf;;AApBK;AAAA,mBAsBW,gCAAaV,IAAb,EAAmB,sBAAYA,IAAZ,CAAnB,CAtBX;;AAAA;AAsBDW,eAtBC;AAwBDC,kBAxBC,GAwBQD,IAAIE,MAAJ,CAAWb,KAAKc,IAAhB,EAAsB,YAAM;AACvC,6BAAOZ,IAAP,+BAAwCF,KAAKc,IAA7C;AACD,aAFY,CAxBR;;;AA4BLR,cAAEC,MAAF,CAASK,MAAT,EAAiB,EAAEJ,aAAaH,EAAf,EAAjB;AACAC,cAAEC,MAAF,CAASK,MAAT,EAAiBH,KAAjB;AACAH,cAAEC,MAAF,CAASK,MAAT,EAAiBF,OAAjB;;AA9BK,6CAgCEE,MAhCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeG,I;;;;;AAVtB;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;IAAYT,C;;AACZ;;;;;;AAqCA,IAAIU,QAAQD,IAAR,KAAiBE,MAArB,EAA6B;AAC3BF,OAAK,IAAL;AACD","file":"index.js","sourcesContent":["import { createServer } from './server/create-server';\nimport { DBServiceBuilder } from './server/db-service-builder';\nimport { modelServiceBuilder } from './server/model-builder';\nimport { handlerServiceBuilder } from './server/controller-builder';\n\nimport { routingFunc } from './routes/all';\nimport { parser as argParser } from './util/argparse';\nimport * as _ from 'lodash';\nimport { InstantiateLogger, logger } from './util/logger';\n\nexport async function main(arg) {\n  let args = null;\n\n  if (arg) {\n    args = arg;\n  } else {\n    args = argParser.parseArgs();\n  }\n\n  InstantiateLogger(args);\n\n  logger.info(`Starting Beagle with args: ${JSON.stringify(args)}`);\n\n  let db = await DBServiceBuilder(args);\n  _.assign(args, { dataService: db });\n\n  let model = await modelServiceBuilder(args);\n  _.assign(args, model);\n\n  let handler = await handlerServiceBuilder(args);\n  _.assign(args, handler);\n\n  let app = await createServer(args, routingFunc(args));\n\n  let server = app.listen(args.port, () => {\n    logger.info(`Gachi listening on port: ${args.port}`);\n  });\n\n  _.assign(server, { dataService: db });\n  _.assign(server, model);\n  _.assign(server, handler);\n\n  return server;\n}\n\nif (require.main === module) {\n  main(null);\n}"]}