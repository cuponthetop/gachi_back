{"version":3,"sources":["server/create-server.js"],"names":["args","routes","app","express","use","req","res","status","send","createServer"],"mappings":";;;;;;;AAGA;;;;;;;;;;;;uDAWO,iBAA4BA,IAA5B,EAAkCC,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AACDC,eADC,GACKC,SADL;;;AAGL,8CAAiBD,GAAjB,EAAsBF,IAAtB;;AAEAE,gBAAIE,GAAJ,CAAQ,MAAR,EAAgBH,MAAhB;;AAEAC,gBAAIE,GAAJ,CAAQ,UAACC,GAAD,EAAMC,GAAN,EAAc;AACpBA,kBAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;AACD,aAFD;;AAPK,6CAWEN,GAXF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeO,Y;;;;;AAdtB;;AACA;;IAAYN,O","file":"create-server.js","sourcesContent":["import { injectMiddleware } from './middleware';\nimport * as express from 'express';\n\n/**\n * <p>\n * 모듈의 비즈니스 로직을 담당하는 express server instance를 생성한다. <br/>\n * Grey-wolf에서는 기본적인 middleware만 추가한 server를 생성한다.<br/>\n * middleware: logger, body-parser, method-override, cross origin access\n * </p>\n * \n * @param  {*} args Server 구성에 필요한 arguments\n * @param  {express.Router} routes api router\n * @returns {Promise<express.Application>} middleware가 추가된 기본적인 server instance\n */\nexport async function createServer(args, routes) {\n  let app = express();\n\n  injectMiddleware(app, args);\n\n  app.use('/api', routes);\n\n  app.use((req, res) => {\n    res.status(404).send();\n  });\n\n  return app;\n}"]}