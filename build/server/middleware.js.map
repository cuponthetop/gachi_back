{"version":3,"sources":["server/middleware.js"],"names":["injectMiddleware","bodyParser","methodOverride","getAllowCrossDomain","logArgs","logger","req","res","next","header","method","sendStatus","err","error","stack","app","args","httpArgs","host","lhost","port","lport","path","lpath","use","urlencoded","extended","json"],"mappings":";;;;;QAoCgBA,gB,GAAAA,gB;;AApChB;;IAAYC,U;;AACZ;;IAAYC,c;;AACZ;;;;AAEA;;;;AAIA,SAASC,mBAAT,CAA6BC,OAA7B,EAAsC;AACpC,MAAIC,SAAS,uBAAU,MAAV,EAAkBD,OAAlB,CAAb;;AAEA,SAAO,UAAUE,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AAC/B,QAAI;AACFD,UAAIE,MAAJ,CAAW,6BAAX,EAA0C,GAA1C;AACAF,UAAIE,MAAJ,CAAW,8BAAX,EAA2C,mCAA3C;AACAF,UAAIE,MAAJ,CAAW,8BAAX,EAA2C,kEAA3C;;AAEA;AACA,UAAI,cAAcH,IAAII,MAAtB,EAA8B;AAC5BH,YAAII,UAAJ,CAAe,GAAf;AACD,OAFD,MAEO;AACLH;AACD;AACF,KAXD,CAWE,OAAOI,GAAP,EAAY;AACZP,aAAOQ,KAAP,wBAAkCD,IAAIE,KAAtC;AACAN;AACD;AACF,GAhBD;AAiBD;;AAED;;;;;;AAMO,SAASR,gBAAT,CAA0Be,GAA1B,EAA+BC,IAA/B,EAAqC;;AAE1C,MAAIC,WAAW;AACbC,UAAMF,KAAKG,KADE,EACKC,MAAMJ,KAAKK,KADhB;AAEbC,UAAMN,KAAKO;AAFE,GAAf;;AAKA;AACAR,MAAIS,GAAJ,CAAQ,gCAAmBP,QAAnB,CAAR;;AAEA;AACAF,MAAIS,GAAJ,CAAQrB,oBAAoBc,QAApB,CAAR;;AAEA;AACAF,MAAIS,GAAJ,CAAQvB,WAAWwB,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;AACAX,MAAIS,GAAJ,CAAQvB,WAAW0B,IAAX,EAAR;AACAZ,MAAIS,GAAJ,CAAQtB,gBAAR;;AAEA;AACAa,MAAIS,GAAJ,CAAQ,kCAAqBP,QAArB,CAAR;AAED","file":"middleware.js","sourcesContent":["import * as bodyParser from 'body-parser';\nimport * as methodOverride from 'method-override';\nimport { getEndLogFormatter, getStartLogFormatter, getLogger } from '../util/logger';\n\n/**\n * Cross Origin Resource Sharing(CORS)를 위한 설정\n * \n */\nfunction getAllowCrossDomain(logArgs) {\n  let logger = getLogger('CORS', logArgs);\n\n  return function (req, res, next) {\n    try {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header('Access-Control-Allow-Methods', 'GET,POST,PUT,OPTIONS,DELETE,PATCH');\n      res.header('Access-Control-Allow-Headers', 'origin, content-type, accept, authorization, content-disposition');\n\n      // need to respond 200 to OPTIONS\n      if ('OPTIONS' === req.method) {\n        res.sendStatus(200);\n      } else {\n        next();\n      }\n    } catch (err) {\n      logger.error(`Unexpected error: ${err.stack}`);\n      next();\n    }\n  };\n}\n\n/**\n * 패킷 로깅(HTTP req/res) / 크로스 오리진 액세스, 바디파서, 메서드오버라이드 등의 미들웨어 추가\n * \n * @param  {Application} app 미들웨어가 추가될 Application\n * @param  {any} env \n */\nexport function injectMiddleware(app, args) {\n\n  let httpArgs = {\n    host: args.lhost, port: args.lport,\n    path: args.lpath,\n  };\n\n  // 패킷 로깅\n  app.use(getEndLogFormatter(httpArgs));\n\n  // 크로스 오리진 액세스\n  app.use(getAllowCrossDomain(httpArgs));\n\n  // 바디파서, 메서드오버라이드\n  app.use(bodyParser.urlencoded({ extended: true }));\n  app.use(bodyParser.json());\n  app.use(methodOverride());\n\n  // 패킷 로깅\n  app.use(getStartLogFormatter(httpArgs));\n\n}"]}