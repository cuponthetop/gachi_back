{"version":3,"sources":["server/db-service-builder.js"],"names":["args","db","isLocal","LocalStorageService","CouchbaseService","init","DBServiceBuilder"],"mappings":";;;;;;AAAA;;AAEA;;;;;;;;;;uDASO,iBAAgCA,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAEDC,cAFC,GAEI,IAFJ;;;AAIL,gBAAID,KAAKE,OAAT,EAAkB;AAChBD,mBAAK,IAAIE,mBAAJ,EAAL;AACD,aAFD,MAEO;AACLF,mBAAK,IAAIG,gBAAJ,EAAL;AACD;;AARI;AAAA,mBAUCH,GAAGI,IAAH,CAAQL,IAAR,CAVD;;AAAA;AAAA,6CAYEC,EAZF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeK,gB","file":"db-service-builder.js","sourcesContent":["// @TODO:: CHOOSE A PROPER DB AND IMPLEMENT SERVICE\n\n/**\n * <p>DBService를 생성해 이 instance를 리턴한다.<br/>\n * args 객체에 isLocal property 값이 true이면 LocalStorage를 이용한 서비스가 생성되며<br/>\n * 그렇지 않으면 Couchbase를 이용한 서비스가 생성된다.</p>\n * \n * @param  {any} args DB Service 타입을 결정하기 위한 argument(LocalStorage/Couchbase)<br/>isLocal property 필요\n * @returns {Promise<DBService>} 생성된 DBService instance\n * \n */\nexport async function DBServiceBuilder(args) {\n\n  let db = null;\n\n  if (args.isLocal) {\n    db = new LocalStorageService();\n  } else {\n    db = new CouchbaseService();\n  }\n\n  await db.init(args);\n\n  return db;\n}"]}