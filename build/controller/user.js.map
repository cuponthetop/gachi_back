{"version":3,"sources":["controller/user.js"],"names":["_","GameController","userMgr","req","res","next","userid","params","get","userInfo","isNull","info","set","requestedUser","fields","query","fieldsToOmit","skeletalGet","ret","message"],"mappings":";;;;;;;;;AAAA;;AACA;;IAAYA,C;;AACZ;;AACA;;AACA;;;;;;;;IAGaC,c,WAAAA,c;AAEX,0BACEC,OADF,EAEE;AAAA;AAAG;;;;;4EAEuBC,G,EAAKC,G,EAAKC,I;;;;;;AAChCC,sB,GAASH,IAAII,MAAJ,CAAW,KAAX,C;;uBAEQ,KAAKL,OAAL,CAAaM,GAAb,CAAiBF,MAAjB,C;;;AAAjBG,wB;;;AAEJ,oBAAIT,EAAEU,MAAF,CAASD,QAAT,CAAJ,EAAwB;AACtB,iCAAOE,IAAP,kCAA2CL,MAA3C;AACA,0CAASF,GAAT,EAAc,0BAAd,EAA0C,GAA1C;AACD,iBAHD,MAGO;AACLJ,oBAAEY,GAAF,CAAMT,GAAN,EAAW,oBAAX,EAAiCM,QAAjC;;AAEAJ;AACD;;;;;;;;;;;;;;;;;;;8EAGWF,G,EAAKC,G;;;;;;AACbK,wB,GAAWN,IAAIQ,IAAJ,CAASE,a;AAEpBC,sB,GAASX,IAAIY,KAAJ,CAAUD,M;AACnBE,4B,GAAe,E;;;uBAGDC,4BAAoBH,MAApB,EAA4BE,YAA5B,EAA0CP,QAA1C,C;;;AAAZS,mB;;;AAEJ,2CAAYd,GAAZ,EAAiBc,GAAjB,EAAsB,GAAtB;;;;;;;;AAEA,oBAAI,aAAEC,OAAF,KAAc,yDAAlB,EAA6E;AAC3E,6CAAYf,GAAZ,EAAiB,EAAjB,EAAqB,GAArB;AACD,iBAFD,MAEO;AACL,0CAASA,GAAT,EAAc,aAAEe,OAAhB,EAAyB,GAAzB;AACD;;;;;;;;;;;;;;;;;;;;;AAIN","file":"user.js","sourcesContent":["import { Game as GameModel, GameManager, defaultRoles } from '../model/user';\nimport * as _ from 'lodash';\nimport { succeedWith, failWith } from '../util/response';\nimport { pseudoRandomBytes } from 'crypto';\nimport { logger } from '../util/logger';\n\n\nexport class GameController {\n\n  constructor(\n    userMgr    \n  ) { }\n\n  async loadRequestedUserInfo(req, res, next) {\n    let userid = req.params[\"uid\"];\n\n    let userInfo = await this.userMgr.get(userid);\n\n    if (_.isNull(userInfo)) {\n      logger.info(`loadRequestedUser - userid: ${userid} not found`);\n      failWith(res, 'Requested User Not Found', 404);\n    } else {\n      _.set(req, 'info.requestedUser', userInfo);\n\n      next();\n    }\n  }\n\n  async getUser(req, res) {\n    let userInfo = req.info.requestedUser;\n\n    let fields = req.query.fields;\n    let fieldsToOmit = [ ];\n\n    try {\n      let ret = await skeletalGet(logger, fields, fieldsToOmit, userInfo);\n\n      succeedWith(res, ret, 200);\n    } catch (e) {\n      if (e.message === 'Field Selector should be provided with array of strings') {\n        succeedWith(res, {}, 200);\n      } else {\n        failWith(res, e.message, 500);\n      }\n    }\n  }\n\n};"]}