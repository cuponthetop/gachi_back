<!DOCTYPE html>
<html>

<head>

  <!--
  head에 기술하는 것은 다음 규칙에 따른다.
  1. 공통 head
  7. 페이지별 스타일 시트
  8. 구글 애널리틱스
  9. 페이스북 픽셀
  10. JS
    -->

  <% include ../common/common.ejs %>

    <link href="/css/notification/notification.css" rel="stylesheet" type="text/css" />

</head>

<body>

  <% include ../nav/nav_level1.ejs %>

    <% include ../nav/nav_level4.ejs %>

      <div id="noti-list" v-cloak v-if="fetched">
        <div class="sent-container" v-if="fetchedSent">
          <div class="sent-label"> <span>보낸 요청</span></div>
          <div class="sent-none" v-if="sentRequests.length === 0">
            <span> 보낸 요청이 없습니다 </span>
          </div>
          <div class="sent-item" v-for="request in sentRequests" v-if="sentRequests.length !== 0">
            {{request.leadroom.leader.nickname}}
          </div>
        </div>

        <div class="received-container" v-if="fetchedReceived">
          <div class="received-label"> <span>받은 요청</span></div>
          <div class="received-none" v-if="receivedRequests.length === 0">
            <span>받은 요청이 없습니다</span>
          </div>
          <div class="received-item" v-for="request in receivedRequests" v-if="receivedRequests.length !== 0">

          </div>
        </div>
      </div>

      <script>
        var notiList = new Vue({
          el: '#noti-list',
          data: {
            fetchedReceived: false,
            fetchedSent: false,
            sentRequests: [],
            receivedRequests: [],
          },
          created: function () {
            gachi.getToken(true)
              .then(this.retrieveToken)
              .then(this.retrieveInfo)
              .then(function () {
              }.bind(this));
          },
          methods: {
            retrieveSent: function (token) {
              return new Promise(function (resolve, reject) {
                $.ajax({
                  type: 'GET',
                  url: gachi.GACHI_URL + 'v1/request/list/sent',
                  dataType: 'json',
                  headers: gachi.authHeader(token)
                }).then(function (requests) {
                  this.sentRequests = requests;
                  this.fetchedSent = true;
                  resolve(requests)
                }.bind(this)).fail(function (error) {
                  reject(error);
                });
              }.bind(this));
            },
            retrieveReceived: function (token) {
              return new Promise(function (resolve, reject) {
                $.ajax({
                  type: 'GET',
                  url: gachi.GACHI_URL + 'v1/request/list/received',
                  dataType: 'json',
                  headers: gachi.authHeader(token)
                }).then(function (requests) {
                  this.receivedRequests = requests;
                  this.fetchedReceived = true;
                  resolve(requests)
                }.bind(this)).fail(function (error) {
                  reject(error);
                });
              }.bind(this));
            },
            retrieveInfo: function (token) {
              return Promise.all([
                this.retrieveReceived(token),
                this.retrieveSent(token)
              ]);
            },
            retrieveToken: function (token) {
              return new Promise(function (resolve, reject) {
                this.token = token;
                resolve(token);
              }.bind(this));
            },
            moment: function (date) {
              return moment(date);
            }
          },
          computed: {
            fetched: function () {
              return this.fetchedSent && this.fetchedReceived;
            }
          }
        });
      </script>
</body>

</html>