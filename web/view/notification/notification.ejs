<!DOCTYPE html>
<html>

<head>

  <!--
  head에 기술하는 것은 다음 규칙에 따른다.
  1. 공통 head
  7. 페이지별 스타일 시트
  8. 구글 애널리틱스
  9. 페이스북 픽셀
  10. JS
    -->

  <% include ../common/common.ejs %>

    <link href="/css/notification/notification.css" rel="stylesheet" type="text/css" />

</head>

<body>

  <% include ../nav/nav_level1.ejs %>

    <div id="noti-list" v-cloak v-if="fetched">
      <div class="sent-container" v-if="fetchedSent">
        <div class="sent-item" v-for="request in sentRequests">

        </div>
      </div>

      <div class="received-container" v-if="fetchedReceived">
        <div class="received-item" v-for="request in receivedRequests">

        </div>
      </div>
    </div>

    <script>
      var notiList = new Vue({
        el: '#noti-list',
        data: {
          fetchedReceived: false,
          fetchedSent: false,
          sentRequests: [],
          receivedRequests: [],
        },
        created: function () {
          gachi.getToken(true)
            .then(this.retrieveToken)
            .then(this.retrieveInfo)
            .then(function () {
            }.bind(this));
        },
        methods: {
          retrieveSent: function (token) {
            return new Promise(function (resolve, reject) {
              $.ajax({
                type: 'GET',
                url: gachi.GACHI_URL + 'v1/request/list/sent',
                dataType: 'json',
                headers: gachi.authHeader(token)
              }).then(function (requests) {
                this.sentRequests = requests;
                this.fetchedSent = true;
                resolve(requests)
              }.bind(this)).fail(function (error) {
                reject(error);
              });
            }.bind(this));
          },
          retrieveReceived: function (token) {
            return new Promise(function (resolve, reject) {
              $.ajax({
                type: 'GET',
                url: gachi.GACHI_URL + 'v1/request/list/received',
                dataType: 'json',
                headers: gachi.authHeader(token)
              }).then(function (requests) {
                this.receivedRequests = requests;
                this.fetchedReceived = true;
                resolve(requests)
              }.bind(this)).fail(function (error) {
                reject(error);
              });
            }.bind(this));
          },
          retrieveInfo: function (token) {
            return Promise.all([
              this.retrieveReceived(token),
              this.retrieveSent(token)
            ]);
          },
          retrieveToken: function (token) {
            return new Promise(function (resolve, reject) {
              this.token = token;
              resolve(token);
            }.bind(this));
          },
          moment: function (date) {
            return moment(date);
          }
        },
        computed: {
          fetched: function () {
            return this.fetchedSent && this.fetchedReceived;
          }
        }
      });
    </script>
</body>

</html>